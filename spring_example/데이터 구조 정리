1. 데이터 구조

데이터 구조는 DB와 캐시의 기반이 되는 개념이므로 가장 먼저 공부하는 것이 좋습니다.

공부 내용:
- 기본 데이터 구조: 배열, 연결 리스트, 스택, 큐
- 트리 구조: 이진 트리, 균형 트리(AVL, Red-Black), B-트리
- 그래프
- 해시 테이블
- 힙

정리 포인트:
- 각 데이터 구조의 특징과 장단점
- 시간 복잡도와 공간 복잡도 분석
- 실제 사용 사례와 응용

추가 공부:
- 알고리즘과 데이터 구조의 관계
- 자주 사용되는 알고리즘(정렬, 검색 등)의 구현

# 데이터 구조 (Data Structure)
개발자가 데이터를 효율적으로 사용할 수 있도록 정리하는 방법
각각의 구조마다 장단점이 존재하여 해결하고자 하는 문제나 우선 사항에 따라 최선이 달라진다.

알고리즘 과 그에 적합한 데이터 구조를 선택하는 것이 프로그래밍

- 니클라우스 비르트 '알고리즘 + 데이터 구조 = 프로그램'

알고리즘은 컨퓨터에게 내리는 지시 사항이고, 데이터 구조는 해당 알고리즘에서 사용하는 데이터를 저장하는 방법을 지시한다.

추상 데이터 타입 -> 데이터 구조를 설명하는 데이터 타입
데이터 구조는 추상 데이터 타입을 실제로 구현한 결과

중요한 이유
1. 효율적인 데이터 관리
2. 원활한 프로그램의 흐름
3. 버그 예방

데이터 구조의 종류
- 선형 데이터 구조(Linear Data Structure)
  - 데이터 요소를 순서대로 정렬
  - 파이썬의 리스트 : 각요소의 앞과 뒤에 다른 요소  
- 비선형 데이터 구조(Nonlinear Data Structure)
  - 데이터를 비연속적으로 연결
  - 그래프 : 각 요소가 다른 여러 요소와 연결

순회(Traverse) : 데이터 구조의 첫 요소부터 마지막 요소로 이동
선형과 다르게 비선형은 종종 뒤돌아가는 백트래킹(Backtracking)이나 재귀가 필요하다.

이러한 이유 때문에 원하는 개별 요소에 접근하려면 선형 데이터 구조가 더 적합
선형 자료구조는 데이터 순회가 쉬워 요소 전체 변경도 적함 + 데이터 구조를 설계하거나 사용에도 적합

비선형이 더 적합한 예시는 소셜 네트워크의 연결처럼 각각의 연동이 있는 것에 적합

정적 vs 동적
크기가 고정된 정적 데이터 구조와 크기가 바뀔 수 있는 동적 데이터 구조

정적 데이터 구조는 생성할 때 그 크기를 정의 -> 이후 고정되어 수정 불가
그러나 저장된 데이터의 값은 수정 가능
C언어는 지원 <-> 파이썬은 없음

일정량의 메모리를 할당해야 함 
- 메모리 : 데이터를 저장하는 공간, 주소를 통해 접근 가능
할당한 메모리 > 데이터 요소 : 메모리 낭비

동적 데이터 구조는 크기를 자유롭게 수정가능
요소를 추가 -> 컴퓨터가 추가로 메모리 할당
요소를 제거 -> 메모리를 비워 다른 데이터 사용 가능
-> 메모리를 더 효율적으로 사용

대신 요소에 접근하는 작업이 정적에 비해 느릴 수 있음
일정 수의 요소를 저장하면 더 많은 메모리를 사용할 수 있음

결론
극한의 효율이 필요한 상황이 아니라면 정적 또는 동적데이터 구조를 고민하기 보단
선형 또는 비선형 데이터 구조 중 무엇을 선택할지 집중하는 것이 더 효율적

데이터의 삽입과 삭제, 탐색의 효율성을 고려하여 메모리 공간을 얼마나 효율적으로 사용하는지 판단




선형 데이터 구조의 종류
정적 데이터 구조


# 배열 (Array)


